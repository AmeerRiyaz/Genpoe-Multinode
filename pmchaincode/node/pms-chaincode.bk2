/*
Chaincode for Property Management System - checkslip based.
Author: Sandeep Romana
Date: 13-11-2018
Code based on sample chaincodes from hyperledger fabric-samples repo.
Copyright(R) - 2018, Center For Development of Advanced Computing. Hyderabad.
PMSC VERSION 2.0
*/

/* The peer chaincode invoke command allows administrators to call chaincode 
functions on a peer using the supplied arguments. The transaction is recorded on the blockchain.

The peer chaincode query command allows the chaincode to be queried by calling 
the Invoke method on the chaincode. The difference between the query and the 
invoke subcommands is that, on successful response, invoke proceeds to submit a 
transaction to the orderer whereas query just outputs the response, successful 
or otherwise, to stdout. Thus the transaction is not recorded on the blockchain */

const shim = require('fabric-shim');
const util = require('util');
const ClientIdentity = require('fabric-shim').ClientIdentity;
var validator = require('validator');

let Chaincode = class {

    // initialize the chaincode
    async Init(stub) {
        console.info('=========== Instantiated property management chaincode ===========');
        return shim.success();
    }

    /* Will invoke a specific function requested by the user. All the supported functions can be invoked from here.*/
    /*Access Control: None*/
    async Invoke(stub) {

        console.info('=========== Invoking the requested functionality ===========');

        let ret = stub.getFunctionAndParameters();

        console.info(ret);

        let method = this[ret.fcn];

        if (!method) {
            console.error('no function of name:' + ret.fcn + ' found');
            throw new Error('Received unknown function ' + ret.fcn + ' invocation');
        }
        try {
            let payload = await method(stub, ret.params);
            return shim.success(payload);
        } catch (err) {
            console.log(err);
            return shim.error(err);
        }
    }

    /* Dummy init function for use with REST as it requires some function to be passed during instantiation */
    /* Access Control: None */
    async initPropertyLedger(stub, args) {

        if (args.length != 1) {
            throw new Error('Invalid args. Expects no args');
        }

        console.info('============= Initializing Ledger Done===========');
    }

    /* Allows to query a specific property based on the unique property id. Will return all the values recorded in the key:value pair
    for a specific property. This function could be invoked by a Citizen or SRO/MRO. */
    /*Access Control: Reader, Writer*/
    async queryByPropertyId(stub, args) {

        // No need to check attribute based access permissions as all roles can call this function

        console.info('=========== Quering Specific Property ===========');

        if (args.length != 1) {
            throw new Error('Incorrect number of arguments. Expecting unique property id');
        }

        let cid = new ClientIdentity(stub);

        //if (cid.assertAttributeValue('role', 'reader') ||
        //    cid.assertAttributeValue('role', 'writer') ) { // explicit role validation

            let uniquePropertyId = args[0];

            let recordAsBytes = await stub.getState(uniquePropertyId); //get the property record from chaincode state

            if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                throw new Error(uniquePropertyId + ' does not exist: Try with other property id.');
            }

            console.log(recordAsBytes.toString());

            console.info('=========== Quering Specific Property Done ===========');

            return recordAsBytes;
        //}else {
        //    throw new Error('USER doesnt have required access for query by property-id');
        //}
    }

    /* Will retrieve the history of the property based on the unique property id. This means that the function returns all the 
    transactions that has been committed on particular property. Helpfull for Encumbrance Certificate/Search. This
    function could be allowed to be invoked by a Citizen or SRO/MRO. */
    /*Access Control: Reader, Writer */
    async getHistoryForPropID(stub, args) {

        // No need to check attribute based access permissions as all roles can call this function

        console.info('============= Getting History for Property ===========');

        if (args.length != 1) {
            throw new Error('Incorrect number of arguments. Expecting 1 : uniquePropertyId');
        }

        let cid = new ClientIdentity(stub);

        if (cid.assertAttributeValue('role', 'reader') ||
            cid.assertAttributeValue('role', 'writer')) { // explicit role vaildation

            let uniquePropertyId = args[0];

            let recordAsBytes = await stub.getState(uniquePropertyId); //get the property from chaincode state

            if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                throw new Error(uniquePropertyId + ' does not exist: Try with other property id.');
            }

            let resultsIterator = await stub.getHistoryForKey(uniquePropertyId);

            let allResults = []; // this list will contain results

            while (true) {
                let res = await resultsIterator.next();

                if (res.value && res.value.value.toString()) {

                    console.log(' ========== Quering Object ============ ');

                    let jsonRes = {}; // empty object

                    console.log(res.value.value.toString('utf8'));
                    jsonRes.TxID = res.value.tx_id;
                    jsonRes.Timestamp = res.value.timestamp;

                    try {
                        jsonRes.Value = JSON.parse(res.value.value.toString('utf8')); // store record in object
                    } catch (err) {
                        console.log(err);
                        jsonRes.Value = res.value.value.toString('utf8');
                    }

                    allResults.push(jsonRes); // push JSON object to list
                }

                if (res.done) { // when iterator res is past end of iterated sequence

                    console.log(' ========== end of data ============ ');

                    await resultsIterator.close();
                    console.info(allResults);
                    break;
                }
            }

            return Buffer.from(JSON.stringify(allResults));
        } else {
            throw new Error('USER doesnt have required access to query property history');
        }
    }

    /* Allows updating the poe-transaction-id to property record. 
    Iff record has valid poe-transaction-id it will regarded as fully registered. */
    /* Access Control: writer */
    async updatePoeTxId(stub, args) {

        console.log('============= updating poe transaction id =============');

        if (args.length != 3) {
            throw new Error('Incorrect number of arguments. Expecting 3 : uniquePropertyId, regularDocNum, poeTransactionId');
        }

        let cid = new ClientIdentity(stub);

        //if (cid.assertAttributeValue('role', 'writer')) {

            console.info('writer is updating poe-transaction-id');

            let uniquePropertyId = args[0];

            let jsonRecord = {}; // empty object

            let recordAsBytes = await stub.getState(uniquePropertyId); //get the property from chaincode state
            if (recordAsBytes.toString().length > 0) { // property id exists

                jsonRecord = JSON.parse(recordAsBytes.toString());

                //validate if poe transaction id is already updated 
                if (jsonRecord.poeTransactionId === '0') {
                    console.log('recording poe transaction id for first time for this record');
                } else {
                    console.log('updating poe transaction id for this record');
                }

                if (jsonRecord.regularDocNum === args[1]) {

                    jsonRecord.poeTransactionId = args[2]; // update poe transaction id in property id
                    jsonRecord.txId = stub.getTxID(); // update the transaction id also

                    //console.log(JSON.stringify(jsonRecord)); // for ease of debugging

                    await stub.putState(args[0], Buffer.from(JSON.stringify(jsonRecord)));
                } else {
                    throw new Error("mismatch for unique-property-id and corresponding regular-document-no");
                }

            } else { // if property id does not exist
                throw new Error(uniquePropertyId + ' does not exist: Try with other propertyId.');
            }

            //return Buffer.from(JSON.stringify(allResults));                
        //} else {
        //    throw new Error('USER doesnt have required access to update POE transaction Id');
        //}

        console.info('============= Updating poe transaction id done =============');
    }

    /* Records a new regular document on the blockchain */
    /*Access Control: Writer*/
    async recordRegularDocument(stub, args) {

        console.info('============= Recording a regular document ===========');

        if (args.length != 11) {
            throw new Error('Incorrect number of arguments. Expecting 11: uniquePropertyId, chkslipId, witness1Name, witness1Aadhaar,' +
                'witness1Address, witness2Name, witness2Aadhaar, witness2Address, registrationDate, poeTransactionId, regularDocNum');
        }

        let cid = new ClientIdentity(stub); // "stub" is the ChaincodeStub object passed to Init() and Invoke() methods

        //if (cid.assertAttributeValue('role', 'writer')) {

            console.info('============= The current user role is writer and can record the regular document ===========');

            if (validator.isHash(args[0], 'sha256') && // uniquePropertyId
                (args[1].length <= 15) && // chkslipId
                (args[2].length <= 30) && // witness1Name
                (args[3] === 'nil' || args[3].length === 12) && // witness1Aadhaar
                (args[4].length <= 150) && // witness1Address
                (args[5].length <= 30) && // witness2Name
                (args[6] === 'nil' || args[6].length === 12) && // witness2Aadhaar
                (args[7].length <= 150) && // witness2Address
                (args[8].length === 10) && // registrationDate
                (args[10].length <= 15) // regularDocNum
            ) {
                let poeTransactionId = '0';
                
                if (args[9] === '0') // poeTransactionId NOT available at time of recording regular document
                    poeTransactionId = '0';
                else if (args[9].length === 64) // poeTransactionId IS available at time of recording regular document
                    poeTransactionId = args[9];
                else {
                    throw new Error('Invalid poe-transaction-id supplied ' + args[9]);
                }

                let recordAsBytes = await stub.getState(args[0]);

                if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                    throw new Error('unique property with Id ' + args[0] + ' does not exist: Try with other unique property ID.');
                }

                let record = JSON.parse(recordAsBytes);

                if (record.uniquePropertyId === args[0] &&
                    record.tempChkslipId === args[1]) {

                        let time = {};
                        time.seconds = 0;
                        time.nanos = 0;

                        // update checkslip-id
                        record.chkslipId = record.tempChkslipId;
                        record.tempChkslipId = '0';
                        record.tempChkslipIdTimestamp = time;
                        // update vendor details
                        record.vendorFullName = record.tempVendorFullName;
                        record.vendorAadhaar = record.tempVendorAadhaar;
                        record.vendorPan = record.tempVendorPan;
                        record.vendorFathersName = record.tempVendorFathersName;
                        //update vendee details
                        record.vendeeFullName = record.tempVendeeFullName;
                        record.vendeeAadhaar = record.tempVendeeAadhaar;
                        record.vendeePan = record.tempVendeePan;
                        record.vendeeFathersName = record.tempVendeeFathersName;
                        // record witness details
                        record.witness1Name = args[2];
                        record.witness1Aadhaar = args[3];
                        record.witness1Address = args[4];
                        record.witness2Name = args[5];
                        record.witness2Aadhaar = args[6];
                        record.witness2Address = args[7];
                        record.registrationDate = args[8];
                        record.poeTransactionId = poeTransactionId;
                        record.regularDocNum = args[10];
                        record.txId = stub.getTxID(); // update the transaction Id

                        await stub.putState(args[0], Buffer.from(JSON.stringify(record)));

                        console.log('txid: ' + record.txId); // for ease of access during testing
                } else
                    throw new Error('Unable to find record with unique property id' + args[0] + 'and checkslip id' + args[1] + 'combination.');

            } else {
                throw new Error('Parameter validation failed');
            }
        //} else {
        //    throw new Error('USER doesnt have required access for recording regular document');
        //}

        console.info('============= Recording regular document Done ===========');
    }

    /* Allows reverting back property record info to original in case of checkslip expiry */
    /*Access Control: Writer*/
    async revertbackCheckslip(stub, args) {

        console.info('============= Revertback checkslip as it has expired ===========');

        if (args.length != 2) {
            throw new Error('Incorrect number of arguments. Expecting 2 : uniquePropertyId, checkslipId' );
        }

        let cid = new ClientIdentity(stub); // "stub" is the ChaincodeStub object passed to Init() and Invoke() methods

        //if (cid.assertAttributeValue('role', 'writer')) {

            if (
                validator.isHash(args[0], 'sha256') && // uniquePropertyId
                (args[1].length <= 15) // checkslipId
            ) {

                let recordAsBytes = await stub.getState(args[0]);

                if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                    throw new Error('record with unique-property-id ' + args[0] + ' does not exist: Try with other property ID.');
                }

                let record = JSON.parse(recordAsBytes);

                // validate checkslip 
                if (
                    (record.tempChkslipId === args[1]) 
                ) {

                    let time = {};
                    time.seconds = stub.getTxTimestamp().seconds.high.toString() + stub.getTxTimestamp().seconds.low.toString();    // Auto fetch
                    time.nanos = stub.getTxTimestamp().nanos.toString();      // Auto fetch

                    //calculate seconds in 30 days
                    //let thirtyDaysInSecs = 30 * 24 * 60 * 60;
                    let fiveMinutes = 5 * 60;  // for testing
                 
                    let diff = time.seconds  - record.tempChkslipIdTimestamp.seconds;

                    console.log('time: ' + time.seconds);   // for testing
                    console.log('temp time ' + record.tempChkslipIdTimestamp.seconds); // for testing
                    console.log('time diff ' + diff); // for testing
                    // validate temporary checkslip timestamp
                    if( diff >= fiveMinutes ) // for testing
                    //if( diff >= thirtyDaysInSecs )
                    {
                        time.seconds = 0;
                        time.nanos = 0;

                        // zero out temporary checkslip id and its timestamp
                        record.tempChkslipId = '0';
                        record.tempChkslipIdTimestamp = time;
                        // revert back temporary vendor info
                        record.tempVendorFullName = record.vendorFullName;
                        record.tempVendorAadhaar = record.vendorAadhaar;
                        record.tempVendorPan = record.vendorPan;
                        record.tempVendorFathersName = record.vendorFathersName;
                        // revert back temporary vendee info
                        record.tempVendeeFullName = record.vendeeFullName;
                        record.tempVendeeAadhaar = record.vendeeAadhaar;
                        record.tempVendeePan = record.vendeePan;
                        record.tempVendeeFathersName = record.vendeeFathersName;

                        record.txId = stub.getTxID(); // Autofetch

                        await stub.putState(args[0], Buffer.from(JSON.stringify(record)));

                        console.log('txid: ' + record.txId); // for ease of access during testing
                    } else {
                        throw new Error('Time validation failed');    
                    }                                
                } else {
                    throw new Error('Checkslip validation failed');
                }
            } else {
                throw new Error('Parameter validation failed');
            }
        //} else {
        //    throw new Error('USER doesnt have required access to record checkslip');
        //}

        console.info('============= Revertback checkslip Done ===========');
    }

    /* Implements logic to update information in checkslip */
    /*Access Control: Writer*/
    async updateCheckslip(stub, args) {

        console.info('============= Updating checkslip data ===========');

        if (args.length != 10) {
            throw new Error('Incorrect number of arguments. Expecting 10 : uniquePropertyId, checkslipId, VendorFullName,' +
                'VendorAadhaar, VendorPan, VendorFatherName, VendeeFullName, VendeeAadhaar, VendeePan, VendeeFatherName');
        }

        let cid = new ClientIdentity(stub); // "stub" is the ChaincodeStub object passed to Init() and Invoke() methods

        //if (cid.assertAttributeValue('role', 'writer')) {

            console.info('============= The current user role is Writer and can update the checkslip info ===========');

            if (
                validator.isHash(args[0], 'sha256') && // uniquePropertyId
                (args[1].length <= 15) && // checkslipId
                (args[2].length <= 30) && // vendorFullName
                (args[3] === 'nil' || args[3].length === 12) && // vendorAadhaar
                (args[4] === 'nil' || args[4].length === 10) && // vendorPan
                (args[5].length <= 30) && // vendorFathersName
                (args[6].length <= 30) && // vendeeFullName
                (args[7] === 'nil' || args[7].length === 12) && // vendeeAadhaar
                (args[8] === 'nil' || args[8].length === 10) && // vendeePan
                (args[9].length <= 30) // vendeeFathersName
            ) {

                let recordAsBytes = await stub.getState(args[0]);

                if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                    throw new Error('record with unique property Id ' + args[0] + ' does not exist: Try with other property ID.');
                }

                let record = JSON.parse(recordAsBytes);

                // validate if the correct vendor data is supplied
                if (
                    (record.tempVendorFullName === args[2]) &&
                    (record.tempVendorAadhaar === args[3]) &&
                    (record.tempVendorPan === args[4]) &&
                    (record.tempVendorFathersName === args[5])
                ) {
                    if (record.tempChkslipId === args[1] ) { // checkslip id is valid so go ahead
                    
                        record.tempVendeeFullName = args[6];
                        record.tempVendeeAadhaar = args[7];
                        record.tempVendeePan = args[8];
                        record.tempVendeeFathersName = args[9];
                        record.txId = stub.getTxID(); // Autofetch

                        await stub.putState(args[0], Buffer.from(JSON.stringify(record)));

                        console.log('txid: ' + record.txId); // for ease of access during testing

                    } else {
                        throw new Error('checkslip with id ' + args[1] + 'does not exist');
                    }
                } else {
                    throw new Error('Vendor validation failed');
                }
            } else {
                throw new Error('Parameter validation failed');
            }
        //} else {
        //    throw new Error('USER doesnt have required access to update checkslip data');
        //}

        console.info('============= Updating checkslip info Done ===========');
    }

    /* Implements logic to record checkslip. Only 1 checkslip on 1 property (UID) is allowed. */
    /*Access Control: Writer*/
    async recordCheckslip(stub, args) {

        console.info('============= Generating new checkslip ===========');

        if (args.length != 10) {
            throw new Error('Incorrect number of arguments. Expecting 10 : uniquePropertyId, newcheckslipId, VendorFullName,' +
                'VendorAadhaar, VendorPan, VendorFatherName, VendeeFullName, VendeeAadhaar, VendeePan, VendeeFatherName');
        }

        let cid = new ClientIdentity(stub); // "stub" is the ChaincodeStub object passed to Init() and Invoke() methods

        //if (cid.assertAttributeValue('role', 'writer')) {

            console.info('============= The current user role is Writer and can record the checkslip ===========');

            if (
                validator.isHash(args[0], 'sha256') && // uniquePropertyId
                (args[1].length <= 15) && // checkslipId
                (args[2].length <= 30) && // vendorFullName
                (args[3] === 'nil' || args[3].length === 12) && // vendorAadhaar
                (args[4] === 'nil' || args[4].length === 10) && // vendorPan
                (args[5].length <= 30) && // vendorFathersName
                (args[6].length <= 30) && // vendeeFullName
                (args[7] === 'nil' || args[7].length === 12) && // vendeeAadhaar
                (args[8] === 'nil' || args[8].length === 10) && // vendeePan
                (args[9].length <= 30) // vendeeFathersName
            ) {

                let recordAsBytes = await stub.getState(args[0]);

                if (!recordAsBytes || recordAsBytes.toString().length <= 0) {
                    throw new Error('record with unique property Id ' + args[0] + ' does not exist: Try with other property ID.');
                }

                let record = JSON.parse(recordAsBytes);
               
                // validate if the vendee of the property can be vendor
                if (
                    (record.vendeeFullName === args[2]) &&
                    (record.vendeeAadhaar === args[3]) &&
                    (record.vendeePan === args[4]) &&
                    (record.vendeeFathersName === args[5]) &&
                    (record.poeTransactionId != '0') // if poe transaction id is not valid dont allow initiating checkslip for this property id
                ) {
                    // make note of time when 1st time checkslip is generated.
                    let time = {};
                    time.seconds = stub.getTxTimestamp().seconds.high.toString() + stub.getTxTimestamp().seconds.low.toString();    // Auto fetch
                    time.nanos = stub.getTxTimestamp().nanos.toString();      // Auto fetch

                    // record checkslip id and its timestamp
                    record.tempChkslipId = args[1];
                    record.tempChkslipIdTimestamp = time;
                    // update temporary Vendor data
                    record.tempVendorFullName = record.vendeeFullName;
                    record.tempVendorAadhaar = record.vendeeAadhaar;
                    record.tempVendorPan = record.vendeePan;
                    record.tempVendorFathersName = record.vendeeFathersName;
                    // record temporary Vendee data
                    record.tempVendeeFullName = args[6];
                    record.tempVendeeAadhaar = args[7];
                    record.tempVendeePan = args[8];
                    record.tempVendeeFathersName = args[9];
                    record.txId = stub.getTxID(); // Autofetch

                    await stub.putState(args[0], Buffer.from(JSON.stringify(record)));

                    console.log('txid: ' + record.txId); // for ease of access during testing
                    console.log('time: ' + time);   // for ease of access during testing

                }else { 
                    throw new Error('Vendor or poe-transaction-id validation failed');
                }
            } else {
                throw new Error('Parameter validation failed');
            }                     
        //} else {
        //    throw new Error('USER doesnt have required access to record checkslip');
        //}

        console.info('============= Recording checkslip Done ===========');
    }

    /* Will allow to record property on the blockchain */
    /*Access Control: Writer*/
    async recordProperty(stub, args) {

        console.info('============= Recording property on blockchain ===========');

        if (args.length != 27) {
            throw new Error('Incorrect number of arguments. Expecting 27: uniquePropertyId, chkslipId, VendorName, VendorAadhaar, VendorPan,' +
                'VendorFathersName, VendeeName, VendeeAadhaar, VendeePan, VendeeFathersName, District, sro, subDivision, mandal, village,' +
                'surveyNo, areaExtent, landUse, witness1Name, witness1Aadhaar, witness1Address, witness2Name, witness2Aadhaar,' + 
                'witness2Address, registrationDate, poeTransactionId, regularDocNum');
        }

        let cid = new ClientIdentity(stub); // "stub" is the ChaincodeStub object passed to Init() and Invoke() methods

        //if (cid.assertAttributeValue('role', 'writer')) {

            console.info('============= The current user role is writer and can record the new property ===========');

            if (validator.isHash(args[0], 'sha256') && // uniquePropertyId
                (args[1].length <= 15) && // chkslipId
                (args[2].length <= 30) && // vendorFullName
                (args[3] === 'nil' || args[3].length === 12) && // vendorAadhaar
                (args[4] === 'nil' || args[4].length === 10) && // vendorPan
                (args[5].length <= 30) && // vendorFathersName
                (args[6].length <= 30) && // vendeeFullName
                (args[7] === 'nil' || args[3].length === 12) && // vendeeAadhaar
                (args[8] === 'nil' || args[4].length === 10) && // vendeePan
                (args[9].length <= 30) && // vendeeFathersName
                (args[10].length <= 30) && // district
                (args[11].length <= 30) && // sro
                (args[12].length <= 30) && // subDivision
                (args[13].length <= 30) && // mandal
                (args[14].length <= 30) && // village
                (args[15].length <= 30) && // surveyNo
                (args[16].length <= 15) && // areaExtent
                (args[17].length <= 30) && // landUse
                (args[18].length <= 30) && // witness1Name
                (args[19] === 'nil' || args[15].length === 12) && // witness1Aadhaar
                (args[20].length <= 150) && // witness1Address
                (args[21].length <= 30) && // witness2Name
                (args[22] === 'nil' || args[18].length === 12) && // witness2Aadhaar
                (args[23].length <= 150) && // witness2Address
                (args[24].length === 10) && // registrationDate
                (args[25].length === 64 || args[25] === '0') && // poeTransactionId
                (args[26].length <= 15) // regularDocNum
            ) {

                //check the existence of Property in pmbct ledger

                let recordAsBytes = await stub.getState(args[0]);
                if (!recordAsBytes || recordAsBytes.toString().length <= 0) {


                    let record = {
                        assetVersion: '1.1', // prefilled
                        uniquePropertyId: args[0], // unique property Id
                        chkslipId: args[1], // unique id constructed by application
                        tempChkslipId: '0',
                        tempChkslipIdTimestamp: {
                            seconds: 0,
                            nanos: 0
                        },
                        vendorFullName: args[2], // max length 30
                        vendorAadhaar: args[3], // length 12
                        vendorPan: args[4], // length 10
                        vendorFathersName: args[5], // max length 30
                        vendeeFullName: args[6], // max length 30
                        vendeeAadhaar: args[7], // length 12
                        vendeePan: args[8], // length 10
                        vendeeFathersName: args[9], // max length 30                        
                        tempVendorFullName: args[2],
                        tempVendorAadhaar: args[3],
                        tempVendorPan: args[4],
                        tempVendorFathersName: args[5],
                        tempVendeeFullName: args[6],
                        tempVendeeAadhaar: args[7],
                        tempVendeePan: args[8],
                        tempVendeeFathersName: args[9],
                        district: args[10], // max length 30
                        sro: args[11], // max length 30
                        subDivision: args[12], // max length 30
                        mandal: args[13], // max length 30
                        village: args[14], // max length 30
                        surveyNo: args[15], // max length 30
                        areaExtent: args[16], // max length 15
                        landUse: args[17], // max length 30
                        witness1Name: args[18], // max length 30 
                        witness1Aadhaar: args[19], // length 12 
                        witness1Address: args[20], // max length 150 
                        witness2Name: args[21], // max length 30
                        witness2Aadhaar: args[22], // length 12
                        witness2Address: args[23], // max length 150
                        registrationDate: args[24], // length 10
                        poeTransactionId: args[25], // length 64 or 0
                        regularDocNum: args[26], // max length 15
                        txId: stub.getTxID() // Auto fetch
                    };

                    await stub.putState(args[0], Buffer.from(JSON.stringify(record)));

                    console.log('txid: ' + record.txId); // for ease of access during testing
                } else
                    throw new Error('Property with UID ' + args[0] + ' is already recorded');


            } else {
                throw new Error('Parameter validation failed');
            }
        //} else {
        //    throw new Error('USER doesnt have required access for recording property');
        //}

        console.info('============= Recording property Done ===========');
    }
};

shim.start(new Chaincode());

// EOF